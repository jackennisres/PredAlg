from yahoo_historical import Fetcher
import pandas as pd
from IPython.display import display

data_Range = Fetcher("MSFT", [2019, 1, 1], [2019, 6, 1])

data = data_Range.getHistorical()

slopes = []

volumes = data['Volume'][1:]
highes = data['High']

for index in range(len(highes) - 1):
  slopes.append(highes[index + 1] - highes[index])

rLocale = []

for index in range(len(slopes)):
  
  #need to implement base cases
  if index is 0:
    if slopes[index] > slopes[index + 1]:
      rLocale.append(1)
    else:
      rLocale.append(-1)

  elif index is len(slopes) - 1:
    if slopes[index] > slopes[index - 1]:
      rLocale.append(1)
    else:
      rLocale.append(-1)

  else:
    behind = slopes[index - 1]
    current = slopes[index]
    infront = slopes[index + 1]

    if current > behind and current > infront:
      rLocale.append(1)
    if (current > behind and current < infront) or (current < behind and current > infront):
      rLocale.append(0)
    if current < behind and current < infront:
      rLocale.append(-1)


netGood = []

for index in range(1, len(highes)):
  if highes[index] >= highes[index - 1]:
    netGood.append(1)
  else:
    netGood.append(-1)

highes = highes[:-1]

new_data = [slopes, rLocale, highes, volumes]
print(len(new_data[0]))
print(len(new_data[1]))
print(len(new_data[2]))
print(len(new_data[3]))
print(len(netGood))

print('---------------------------')


import numpy as np
new_data = np.transpose(new_data)


for nei in range(1, 11):
  from sklearn.neighbors import KNeighborsClassifier
  clf = KNeighborsClassifier(n_neighbors=nei)

  print('t1')
  from sklearn.model_selection import train_test_split as tts
  xTrain, xTest, yTrain, yTest = tts(new_data, netGood, random_state=0)
  print('t2')
  clf.fit(xTrain, yTrain)

  print("Neighbors".format(nei))
  print(clf.score(xTest, yTest))
